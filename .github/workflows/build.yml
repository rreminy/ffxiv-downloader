name: Build and Release
on: push

jobs:
  build:
    name: Build ${{matrix.name}}
    strategy:
      matrix:
        include:
        - id: windows
          name: Windows
          rid: win-x64
        - id: linux
          name: Linux
          rid: linux-x64

    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0"
      
      - name: Restore
        run: dotnet restore -r ${{matrix.rid}} -p:ContinuousIntegrationBuild=true

      - name: Build
        run: dotnet build -c Release -r ${{matrix.rid}} --no-restore -p:ContinuousIntegrationBuild=true FFXIVDownloader.Command

      - name: Publish
        run: dotnet publish -c Release -r ${{matrix.rid}} --no-build -o build -p:ContinuousIntegrationBuild=true FFXIVDownloader.Command
      
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: build-${{matrix.id}}
          path: build
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          submodules: recursive

      - name: Check Version
        id: version
        uses: issue-ops/semver@v2
        with:
          manifest-path: action.yml
          workspace: ${{ github.workspace }}

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "v${{ steps.version.outputs.version }}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.version }} does not exist"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Download Linux Build
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/download-artifact@v4
        with:
          name: build-linux
          path: linux
    
      - name: Download Windows Build
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/download-artifact@v4
        with:
          name: build-windows
          path: windows
      
      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: |
            linux/FFXIVDownloader.Command
            windows/FFXIVDownloader.Command.exe